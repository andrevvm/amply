{
  "name": "node-dummy-cache",
  "description": "A simple in memory cache to use with nodejs",
  "version": "0.2.2",
  "author": {
    "name": "Ricardo Pescuma Domenecci"
  },
  "url": "http://github.com/pescuma/node-dummy-cache",
  "license": "MIT",
  "main": "./lib/cache.js",
  "repository": {
    "type": "git",
    "url": "http://github.com/pescuma/node-dummy-cache"
  },
  "dependencies": {},
  "devDependencies": {
    "nodeunit": "0.7.x"
  },
  "scripts": {
    "test": "nodeunit test/tests.js "
  },
  "readme": "node-dummy-cache\n================\n\nA simple in memory cache to use with nodejs.\n\n[![Build Status](https://secure.travis-ci.org/pescuma/node-dummy-cache.png)](http://travis-ci.org/pescuma/node-dummy-cache)\n\n\n## Installation\n\n\tnpm install node-dummy-cache\n\n\n## Usage\n\n### Simple key/value\n\n```javascript\nvar cache = require('node-dummy-cache');\n\nvar users = cache.create(cache.ONE_HOUR);\n\nusers.put(1, { name : 'A' });\n\nvar user = users.get(1);\n```\n\n### Fetch when needed\n\n```javascript\nvar cache = require('node-dummy-cache');\n\nvar users = cache.create(cache.ONE_HOUR, function (id, callback) {\n\t// Do complex stuff here\n\tcallback(undefined, user);\n});\n\nusers.get(1, function(err, user) {\n\t// You got it\n});\n```\n\n### Function style\n\nBefore:\n\n```javascript\nfunction dummy(a, b, c, callback) {\n\t// Do complex stuff here\n\tcallback(undefined, 'A', 'B');\n};\n\ndummy(1, 2, 3, function(err, data1, data2) {\n\t// You got it\n});\n```\n\nAdding cache:\n\n```javascript\nvar cache = require('node-dummy-cache');\n\nvar dummy = cache.create(cache.ONE_HOUR, function (a, b, c, callback) {\n\t// Do complex stuff here\n\tcallback(undefined, 'A', 'B');\n});\n\ndummy(1, 2, 3, function(err, data, data2) {\n\t// You got it\n});\n```\n\n### Mixed\n\n```javascript\nvar cache = require('node-dummy-cache');\n\nvar users = cache.create(cache.ONE_HOUR, function (id, callback) {\n\t// Do complex stuff here\n\tcallback(undefined, user);\n});\n\nusers.get(1, function(err, user) {\n\t// You got it\n});\n\nusers(1, function(err, user) {\n\t// You got it\n});\n\nvar user = users.get(1); // Returns only if cached\n\nvar user = users(1); // Returns only if cached\n```\n\n\n### Complex\n\n```javascript\nvar cache = require('node-dummy-cache');\n\nvar users = cache.create(cache.ONE_HOUR, function (id1, id2, callback) {\n\t// Do complex stuff here\n\tcallback(undefined, user, date);\n});\n\nusers.get(1, 2, function(err, user, date) {\n\t// You got it\n});\n\nvar user = users.get(1, 2); // Returns the user only if cached\n\nusers.put(1, 2, user); // Adds the user, but no date\n\n```\n\n\t\n## API\n\nAll arguments passed to the get / put must be JSON serializable.\n\n### cache.create(maxAliveTimeMS: number, maxNotAccessedTimeMs: number, fetcher: function)\n\nCreates a new cache. \n\nParams:\n- maxAliveTimeMS : Max time a value will stay in cache starting with its creation\n- maxNotAccessedTimeMs : Max time a value will stay in cache after its last access\n- fetcher : callback to fetch the data\n\n### cache.create(maxAliveTimeMS: number, fetcher: function)\n\nCreates a new cache. \n\nParams:\n- maxAliveTimeMS : Max time a value will stay in cache starting with its creation\n- fetcher : callback to fetch the data\n\n### cache.create(maxAliveTimeMS: number, maxNotAccessedTimeMs: number)\n\nCreates a new cache. All values must be added to cache using put.\n\nParams:\n- maxAliveTimeMS : Max time a value will stay in cache starting with its creation\n- maxNotAccessedTimeMs : Max time a value will stay in cache after its last access\n\n### cache.create(fetcher: function)\n\nCreates a new cache. Values never expires.\n\nParams:\n- fetcher : callback to fetch the data\n\n### cache.create(maxAliveTimeMS: number)\n\nCreates a new cache. All values must be added to cache using put.\n\nParams:\n- maxAliveTimeMS : Max time a value will stay in cache starting with its creation\n\n### cache.create()\n\nCreates a new cache. Values never expires. All values must be added to cache using put.\n",
  "_id": "node-dummy-cache@0.2.2",
  "dist": {
    "shasum": "b9bb511089ba68ec9379b719a7e93e45e517ebdc"
  },
  "_from": "node-dummy-cache"
}
